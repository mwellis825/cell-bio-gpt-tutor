name: Pages

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Prepare docs directory
        run: |
          mkdir -p docs
          # Ensure we always have a viewer.html there (yours can already exist)
          test -f docs/viewer.html && echo "viewer.html present" || echo "Note: add docs/viewer.html if missing"

      - name: Fetch h5p-standalone runtime from npm (multiple fallbacks)
        shell: bash
        run: |
          set -euo pipefail
          TMPDIR="$(mktemp -d)"
          cd "$TMPDIR"

          # Try these versions in order; the first that downloads wins
          VERSIONS=("1.4.0" "1.3.1" "1.3.0" "latest")
          SUCCESS=""

          fetch_tarball () {
            URL="$1"
            echo "Trying: $URL"
            if curl -fsSL "$URL" -o h5p.tgz; then
              echo "Downloaded."
              return 0
            else
              echo "Failed."
              return 1
            fi
          }

          for V in "${VERSIONS[@]}"; do
            # First try the npm registry tarball (most reliable for CI)
            if fetch_tarball "https://registry.npmjs.org/h5p-standalone/-/h5p-standalone-${V}.tgz"; then
              SUCCESS="$V"
              break
            fi
            # Fallback: unpkg tarball URL
            if fetch_tarball "https://unpkg.com/h5p-standalone@${V}/dist/../.."; then
              SUCCESS="$V"
              break
            fi
          done

          if [[ -z "$SUCCESS" ]]; then
            echo "ERROR: Could not fetch h5p-standalone from any source."
            exit 1
          fi

          echo "Using h5p-standalone version: $SUCCESS"

          # Extract tarball
          tar -xzf h5p.tgz

          # The tarball contains a top-level "package/" folder
          if [[ ! -d package/dist ]]; then
            echo "ERROR: Unexpected tarball structure; dist/ not found."
            ls -la
            exit 1
          fi

          # Copy the exact dist files we need into /docs
          cp package/dist/main.bundle.js "$GITHUB_WORKSPACE/docs/main.bundle.js"
          cp package/dist/frame.bundle.js "$GITHUB_WORKSPACE/docs/frame.bundle.js"
          # CSS path changed between releases; handle both common locations
          if [[ -f package/dist/styles/h5p.css ]]; then
            cp package/dist/styles/h5p.css "$GITHUB_WORKSPACE/docs/h5p.css"
          elif [[ -f package/dist/h5p.css ]]; then
            cp package/dist/h5p.css "$GITHUB_WORKSPACE/docs/h5p.css"
          else
            echo "ERROR: h5p.css not found in dist."
            exit 1
          fi

          echo "Files staged in docs/:"
          ls -l "$GITHUB_WORKSPACE/docs"

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: docs

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
